# -*- coding: utf-8 -*-
"""Fake news Detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JuZsMQ5Z0qymCikiorOKKBQMqHNlAzSQ
"""

import numpy as np
import pandas as pd
import re #useful for searching words in a text
from nltk.corpus import stopwords # those words which does not add value to the text like a, an
from nltk.stem.porter import PorterStemmer #give us the root word of the particular word
from sklearn.feature_extraction.text import TfidfVectorizer #used to text into features
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
import string
import seaborn as sns

import nltk
nltk.download('stopwords')

print(stopwords.words('english')) # printing the stopwords

"""Data Pre Proecssing"""

#loading the dataset into pandas dataframe
df_fake = pd.read_csv('/content/Fake.csv')
df_true = pd.read_csv('/content/True.csv')

df_fake.head()

df_true.head()

#inserting column as a target feature
df_fake['class'] = 0
df_true['class'] = 1

df_true.shape,df_fake.shape

data_fake_manual_testing = df_fake.tail(10)
for i in range(23480,23470,-1):
  df_fake.drop([i],axis=0,inplace=True)

data_true_manual_testing = df_true.tail(10)
for i in range(21416,21406,-1):
  df_true.drop([i],axis=0,inplace=True)

df_fake.shape, df_true.shape

data_fake_manual_testing['class'] = 0
data_true_manual_testing['class'] = 1

data_fake_manual_testing.head(10)

data_merge = pd.concat([df_fake,df_true],axis=0)
data_merge.head(10)

data_merge.columns

data = data_merge.drop(['title','subject','date'],axis=1)

data.isnull().sum()

data = data.sample(frac=1)

data.head()

data.reset_index(inplace=True)
data.drop(['index'],axis=1,inplace=True)

data.columns

def wordopt(text):
  text = text.lower()
  text = re.sub('\[.*?\]','',text)
  text = re.sub("\\W"," ",text)
  text = re.sub('https?://\S+|www\.\S+','',text)
  text = re.sub('<.*?>+','',text)
  text = re.sub('[%s]' % re.escape(string.punctuation),'',text)
  text = re.sub('\n','',text)
  text = re.sub('\w*\d\w*','',text)
  return text

data['text'] = data['text'].apply(wordopt)

x = data['text']
y = data['class']

x_train, x_test, y_train, y_test = train_test_split(x,y,test_size = 0.25)

from sklearn.feature_extraction.text import TfidfVectorizer

vectorization = TfidfVectorizer()
xv_train = vectorization.fit_transform(x_train)
xv_test = vectorization.transform(x_test)

LR = LogisticRegression()
LR.fit(xv_train,y_train)

pred_lr=LR.predict(xv_test)

LR.score(xv_test, y_test)

print(classification_report(y_test, pred_lr))

from sklearn.tree import DecisionTreeClassifier

DT = DecisionTreeClassifier()
DT.fit(xv_train, y_train)

predict_dt = DT.predict(xv_test)

DT.score(xv_test,y_test)

print(classification_report(y_test,predict_dt))